How to add a new test
=====================

The list of tests to be run by the test suite is defined in file
'TBBTestSuite/BrowserBundleTests.pm' in the '@tests' variable.

Each test is defined with the following properties:

name::
        The name of the test. For 'mozmill', 'selenium' and 'tor_bootstrap'
        tests this name is used to find the test filename.

type::
        The type of tests. This can be 'mozmill', 'selenium',
        'tor_bootstrap', 'command', or something else if you want to
        write the test in perl. In the later case, you need to define
        it in the '%test_types' variable.

descr::
        A short description.

fail_type::
        The default is 'error'. If you set this to 'fatal', when this
        test fails the following tests are not run. If you set this to
        'warning', failure of this test does not fail the report.

pre::
        A reference to a perl subroutine that will be run before the
        test.

post::
        A reference to a perl subroutine that will be run after the
        test.

enable::
        A reference to a perl subroutine that should return false when
        the test should be skipped.


Adding a mozmill test
---------------------

To add a new test based on mozmill, you will add something like this in
'TBBTestSuite/BrowserBundleTests.pm':

----
    {
        name  => 'example-test',
        type  => 'mozmill',
        descr => 'Example mozmill test',
    },
----

The mozmill test files are stored in the directory
'mozmill/mozmill-tests/tbb-tests/'. The name of the file is the name
of the test with '.js' at the end.


Adding a selenium test
----------------------

To add a new test based on selenium webdriver, you will add something
like this in 'TBBTestSuite/BrowserBundleTests.pm':

----
    {
        name  => 'example-test',
        type  => 'selenium',
        descr => 'Example selenium test',
    },
----

The selenium test files are stored in the directory 'selenium-tests'.
The name of the file that will be executed is 'test_$name.py' (with
$name replaced by the test name).


Adding a command test
---------------------

To run a command on some files, and check the output. You will add
something like this in 'TBBTestSuite/BrowserBundleTests.pm':

----
    {
        name         => 'readelf_RELRO',
        type         => 'command',
        descr        => 'Check if binaries are RELocation Read-Only',
        files        => [ 'Browser/firefox', 'Tor/tor', ],
        command      => [ 'readelf', '-l' ],
        check_output => sub { $_[0] =~ m/GNU_RELRO/ },
    },
----

The 'command' option is the command that should be run. The 'files'
option is the list of files on which it should be run. If 'files' is a
reference to a subroutine, then it is expected to return an array
reference containing the files list. The 'check_output' is optional and
is a reference to a subroutine that checks the output of the command.
The test will fail if the command returns non-zero, or the check_output
sub returns false, on any of the files.

