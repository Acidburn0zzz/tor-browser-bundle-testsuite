#!/usr/bin/perl -w
use strict;
use FindBin;
use lib "$FindBin::Bin";
use Data::Dump qw/dd/;
use File::Path qw(make_path);
use File::Spec;
use YAML::Syck;
use TBBTestSuite::Common qw(exit_error run_alone rm_pidfile);
use TBBTestSuite::Options qw($options);
use TBBTestSuite::Reports qw(report_dir report_path save_report);
use TBBTestSuite::Reports::Receive;
use TBBTestSuite::Reports::Send;
use TBBTestSuite::Tests;
use TBBTestSuite::BrowserBundleTests qw(tbb_filename_infos);

sub set_report_success {
    my ($report) = @_;
    $report->{success} = 1;
    $report->{error_tests} = {};
    $report->{warning_tests} = {};
    foreach my $tbbfile_name (keys %{$report->{tbbfiles}}) {
        my $tbbfile = $report->{tbbfiles}{$tbbfile_name};
        $report->{success} = 0 unless $tbbfile->{success};
        foreach my $test (@{$tbbfile->{tests}}) {
            if (TBBTestSuite::Tests::is_test_error($test)) {
                push @{$report->{error_tests}{$test->{name}}}, $tbbfile_name;
            }
            if (TBBTestSuite::Tests::is_test_warning($test)) {
                push @{$report->{warning_tests}{$test->{name}}}, $tbbfile_name;
            }
            if (TBBTestSuite::Tests::is_test_known($test)) {
                push @{$report->{known_tests}{$test->{name}}}, $tbbfile_name;
            }
        }
    }
}

sub is_shafile {
    my ($tbbfile) = @_;
    return 0 if ref $tbbfile;
    my (undef, undef, $file) = File::Spec->splitpath($tbbfile);
    return $file eq 'sha256sums.txt';
}

sub run_tests {
    return unless @{$options->{args}};
    my $report = {
        tbbfiles => {},
        options  => $options,
        time     => time,
        system_infos => TBBTestSuite::Common::system_infos,
        report_format => '1',
    };
    foreach my $tbbfile (@{$options->{args}}) {
        my $tbbinfos = ref $tbbfile eq 'HASH' ? $tbbfile
                         : tbb_filename_infos($tbbfile);
        if (is_shafile($tbbfile)) {
            TBBTestSuite::Tests::test_sha($report, $tbbfile);
        } else {
            TBBTestSuite::Tests::test_start($report, $tbbinfos);
        }
    }
    set_report_success($report);
    save_report($report);
    print 'Report directory: ', report_dir($report), "\n";
    TBBTestSuite::Reports::make_report($report);
    TBBTestSuite::Reports::make_reports_index($report);
    TBBTestSuite::Reports::Send::send_report if $options->{'upload-to'};
}

sub load_report_from_file {
    exit_error "--name is not set" unless $options->{name};
    my $report = { options => $options };
    $report = YAML::Syck::LoadFile(report_path($report, 'report.yml'));
    $report->{options} = { %{$report->{options}}, %$options };
    return $report;
}

sub make_report {
    my $report = load_report_from_file;
    TBBTestSuite::Reports::make_report($report);
}

sub receive_report {
    my $report = TBBTestSuite::Reports::Receive::receive_report;
    TBBTestSuite::Reports::make_reports_index($report);
}

sub email_report {
    my $report = load_report_from_file;
    TBBTestSuite::Reports::email_report($report);
}

sub show_report {
    my $report = load_report_from_file;
    print TBBTestSuite::Reports::text_report($report);
}

sub dump_options {
    dd $options;
}

sub gen_missing_thumbnails {
    my $report = load_report_from_file;
    TBBTestSuite::Reports::generate_missing_thumbnails($report);
}

my %actions = (
    run_tests => \&run_tests,
    list_tests => \&TBBTestSuite::BrowserBundleTests::list_tests,
    reports_index => \&TBBTestSuite::Reports::make_reports_index,
    make_report => \&make_report,
    send_report => \&TBBTestSuite::Reports::Send::send_report,
    receive_report => \&receive_report,
    update_authkeys => \&TBBTestSuite::Reports::Receive::update_authkeys,
    email_report => \&email_report,
    show_report  => \&show_report,
    dump_options => \&dump_options,
    gen_missing_thumbnails => \&gen_missing_thumbnails,
);

sub usage {
    print STDERR "$0 [--action=action_name] [OPTIONS...]\n\n";
    print STDERR "Possible actions:\n";
    foreach my $act (keys %actions) {
        print STDERR " - $act\n";
    }
    exit 1;
}

usage unless @ARGV;
exit_error "Unknow action $options->{action}" unless $actions{$options->{action}};
run_alone;
make_path($options->{tmpdir});
$actions{$options->{action}}->();
rm_pidfile;
